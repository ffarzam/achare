"""
Django settings for achareh project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "account",
    "rest_framework",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "achareh.custom_middlewares.elastic_log_handler.ElasticAPILoggerMiddleware",
]

ROOT_URLCONF = "achareh.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "achareh.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("NAME"),
        "HOST": os.environ.get("HOST"),
        "PORT": os.environ.get("PORT"),
        "USER": os.environ.get("USER"),
        "PASSWORD": os.environ.get("PASSWORD"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "account.User"

REDIS_HOST = os.environ.get("REDIS_HOST")
REDIS_PORT = os.environ.get("REDIS_PORT")
REDIS_AUTH_TTL = 60 * 60 * 24 * 14
REDIS_OTP_TTL = 60 * 2
REDIS_THROTTLE_TTL = 60 * 60
REDIS_WORK_FLOW_TTL = 60 * 5

ACCESS_TOKEN_TTL = 60 * 60 * 24 * 1
REFRESH_TOKEN_TTL = 60 * 60 * 24 * 14


CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/0",
        "OPTIONS": {
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "auth": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/1",
        "TIMEOUT": REDIS_AUTH_TTL,
        "OPTIONS": {
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "otp": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/2",
        "TIMEOUT": REDIS_OTP_TTL,
        "OPTIONS": {
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "throttle": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/3",
        "TIMEOUT": None,
        "OPTIONS": {
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "work_flow": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/4",
        "TIMEOUT": None,
        "OPTIONS": {
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "account.authentication.PhoneAuthBackend",
]

REST_FRAMEWORK = {
    "DEFAULT_THROTTLE_RATES": {
        "register": "3/hour",
        "login": "3/hour",
        "check_phone": "5/hour",
    }
}


ELASTICSEARCH_HOST = os.environ.get("ELASTICSEARCH_HOST")
ELASTICSEARCH_PORT = os.environ.get("ELASTICSEARCH_PORT")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "elasticsearch_handler": {
            "level": "INFO",
            "class": "achareh.custom_log_handler.ElasticsearchHandler",
            "host": ELASTICSEARCH_HOST,
            "port": ELASTICSEARCH_PORT,
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "elastic_logger": {
            "handlers": ["elasticsearch_handler"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
